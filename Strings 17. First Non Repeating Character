class Solution {
    // Function to find the first non-repeating character in a string.
    static final int MAX_CHAR = 26;
    static char nonRepeatingChar(String s) {
        int[] freq = new int[MAX_CHAR];
        
        for(char c:s.toCharArray()){
            freq[c-'a']++;//the chracters in the given string are stored in the alpha order
        }
        
        for(int i=0;i<s.length();++i){
            if(freq[s.charAt(i)-'a']==1){
                return s.charAt(i);
            }
        }
        return '$';
    }
}

-------------------------------------------------------------------------------------------------
// Java program to find the index of the first non repeating
// character by storing indices

import java.util.Arrays;

class GfG {

    // As the input string can only have lowercase 
    // characters, the maximum characters will be 26
    static final int MAX_CHAR = 26;

    static char nonRepeatingChar(String s) {
        int[] vis = new int[MAX_CHAR];
        Arrays.fill(vis, -1);

        // Iterate through the string
        for (int i = 0; i < s.length(); i++) {

            // If the character is seen for the first time,
            // store its index
            if (vis[s.charAt(i) - 'a'] == -1)
                vis[s.charAt(i) - 'a'] = i;

            // If the character is seen again, mark it as -2
            else
                vis[s.charAt(i) - 'a'] = -2;
        }

        int idx = Integer.MAX_VALUE;

        // Find the smallest index among all non-repeating 
        // characters
        for (int i = 0; i < MAX_CHAR; i++) {
            if (vis[i] >= 0)
                idx = Math.min(idx, vis[i]);
        }

        // If non-repeating character is found, return it 
        // Else return '$'
        return (idx == Integer.MAX_VALUE ? '$' : s.charAt(idx));
    }

    public static void main(String[] args) {
        String s = "racecar";
        System.out.println(nonRepeatingChar(s));
    }
}
